

	컴퓨터 언어 : java, python,c, c# 등
		1. 컴퓨터 구조 책 **
		2. 알고리즘 책 [ 백준 ] **
	
	java 특징 : 객체지향 [ 생활 ==> 컴퓨터 ]
		1. 100% 객체지향 언어
		
		
	산업화 => 자동화, 대량생산

	클래스 : 설계도
	객체 : 설계도 기반으로 만들어진 부품
	
	 	붕어빵 클래스 : 밀가루, 내용물 등
	 	객체 : 서로다른 붕어빵
	 	
	 	자동차 클래스 : 엔진, 의자, 핸들 등
	 	 객체 : 서로다른 자동차
	 	 
	 	 회원 클래스 : 아이디, 비밀번호, 이메일등
	 	 객체 : 여러명의 회원들
	 	 
	 	 // 코드 입력시 규칙
	 	 	1. 클래스 안에 코드 작성
			2. main 메소드 안에 있는 코드만 실행 가능	 	 	
	 	 	3. { : 시작, } : 끝 
	 	 	4. 클래스, 메소드 등 을 제외한 코드 끝에 
	 	 		; [ 세미 클론 ] : 일처리
	 	 	5. 클래스내 멤버에 접근할때 .
	 	 		ex) 클래스명.멤버이름	
 			6. 키워드 [ 미리 만들어진 단어 ] 제외 하고는 모든 
 				문자에는 "" 처리, 숫자는 "" 처리 X
			7. 컨트롤 + 스페이스바 : 자동완성
			8. run [컨트롤 + f11]
	 	 		
	 	 		
 			
	 	 		
 		
=====================================================

1. System 클래스 : 전반적인 시스템 클래스 제공
	system.out : 출력
		1] println : console 출력
		2] print : 자동줄바꿈 X
		3] printf("형식문자", 데이터) : 형식[꾸미기]
		
2. Scanner 클래스
	1] nextInt() : 객체내 저장된 데이터를 읽어오는 메소드

	String 클래스 : 문자열 클래스
	= new 생략 가능!
	1] next() : 정수형 받아오기
	2] nextInt() : 
	3] .equals(); 문자열 비교
	
3. Random 클래스
	1] nextInt(수) : 0~(수 -1 ) 앞까지의 난수 (정수) 발생
	2] nextInt(수) +시작값 ~수까지의 난수(정수) 발생

4. Arrays 클래스 : 배열 클래스
	1] Arrays.sort(배열명) : 해당 배열이 오름차순으로 정렬
	2] Arrays.sort(배열명, Collections.reverseIrder() ) : 내림차순 정렬
	
5. ArrayList 클래스 : 컬렉션 프레임워크 중 하나 => 여러개 변수/객체 관리
	ArrayList<리스트에 담을 클래스명> 리스트명 = newArrayList();
	1] 배열과 동일하지만 더 다양한 메소드 제공
		리스트명.add(객체명) : 객체를 리스트에 저장
		리스트명.get(인덱스번호) : 해당 인덱스의 객체를 호출 [인덱스 0번부터 시작]
		리스트명.size() :

	[ java 문법 ]

1. 형식 문자 
	1] %d : 정수가 들어가는 자리
	2] %s : 문자열 들어가는 자리	

2. 제어 문자
	1] \n : 줄바꿈
	2] \t : 들여쓰기
	
3. 변수의 자료형 : 미리 만들어진 상자 크기 ===> 메모리 효율적
	1. boolean 	= 		1byte	논리형
	2. char 	= 		2byte	문자형
	3. byte 	= 		1byte	정수형
	4. short 	= 		2byte	정수형
	5. int 		= 		4byte	정수형	
	6. long 	= 		8byte	정수형
	7. float 	=		4byte 	실수형
	8. double	= 		8byte 	실수형
	
4. 형변환
	1. 작은 용량 => 큰 용량 변환 가능
	2. 큰 용량에서 작은량 변환 불가능
	3. 강제 형변환 : 큰 용량 => 작은 용량 강제로 변환
			// 변수명 앞에 (변경할자료형/클래스명)
				ex) int 정수 = (int) long형 변수
	
	
	
	
	
		
	용량 단위 : 
	0,1 : 1비트 => 8비트 => 1바이트 [byte]
				01010101
				
4. 연산자 : 연산시 사용되는 특수문자 [두개 이상 연산자 있을경우 우선순위]
	1] 산술 연산자 => 결과 : 값
		+더하기, -빼기, *곱하기, /나누기, %나머지
	2] 대입 연산자
		= [대입 : 오른쪽값이 왼쪽에 대입]
	 	+= [ 오른쪽값을 왼쪽값에 더한후 왼쪽값에 대입]
	 		ex) 변수 += 1 == 변수 = 변수+1
 		*=, /=, %=, -=
	3] 비교 연산자 => 결과 : T(1) / F(0)
		> 초과	>= 이상	 == 같다 [String은 사용불가]
		< 미만	<= 이하	 != 같지않다 [아니다]
				=< X
	4] 논리 연산자 [ 2개 이상의 비교연산자 사용시 ] 
		&& : and [ 이면서, 면서, 이고, 그리고, 모두 ]
			ex) 변수1 >= 10 && 변수2 >= 30  비교연산자가 모두 T => T
		
		|| : or [ 이거나, 거나, 하나라도, 또는 ]
			ex) a >= 10 || b >= 30		비교연산자가 하나라도 T => T
			
		!  : not [ T => F ]
			ex) !a >= 10	   T=>F
	
	5] 증감 연산자 [ 순차적인 증가/감소 ] 
		++변수 : 선위 1증가 [ 해당 코드줄에서 우선 처리 ] 
		변수++ : 후위 1증가 [ 해당 코드줄에서 마지막 처리 ]
		--변수 : 선위 1감소 [ 해당 코드줄에서 우선 처리 ]
		변수-- : 후위 1감소 [ 해당 코드줄에서 마지막 처리 ]
		
		
				// 예외처리 : 오류 발생시 처리 코드
		// 1. 일반적인 오류는 코드에서 처리
		// 2. 예상치 못한 오류 발생시[프로그램 종료] => 예외처리 => 오류 발생시에도 프로그램 정상화
			// 	1. 코드상 문제가 없는경우
		// 3. 형태 :
			// try { 오류발생 예상코드 }
			// catch(예외클래스 객체명) { 오류발생시 대체 코드 }
			// finally { 무조건 실행 되는 코드 }
		// 4. 예외클래스
			// 1. 예외 이류를 알고 있는 경우 : 예외클래스 사용
				// NullPointerException
				// NumberFormatException
				// ArrayIndexOutOfBoundsException
				//등등
			// 2. 예외 이유를 다양하거나 모르는 경우 : Exception 클래스 사용
				// Exception : 모든 Exception 처리 가능 [ 슈퍼 클래스 ]
		// 5. 예외 던지기 [ 오류 떠넘기기 ]
			// 1. 한곳에서 모든 예외를 처리하고 다른 코드에서는 예외 처리 코드로 오류 떠넘기기
			// 2. 오류를 이동시켜 한곳에서 처리
			// 3. 접근제한자 반환자료형 메소드명 (인수) throws Exception{예외코드}
		
		//6. 예외 만들기
			//throw new Exception(예외이름);
			
	7. 파일 클래스
		1] FileOutputStream : 파일 쓰기 클래스
			.write(바이트)
				.write(내용.getBytes());
		2] FileInputStream : 파일 읽기 클래스
			.read(바이트)
				.read(내용.getBytes());
		* 문자열.getBytes() 문자열 => 바이트
		* new String(바이트) : 바이트 => 문자열
				
	